// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateBattle implements createBattle operation.
	//
	// Creates a new Battle and persists it to storage.
	//
	// POST /battles
	CreateBattle(ctx context.Context, req CreateBattleReq) (CreateBattleRes, error)
	// CreateCar implements createCar operation.
	//
	// Creates a new Car and persists it to storage.
	//
	// POST /cars
	CreateCar(ctx context.Context, req CreateCarReq) (CreateCarRes, error)
	// CreateGroup implements createGroup operation.
	//
	// Creates a new Group and persists it to storage.
	//
	// POST /groups
	CreateGroup(ctx context.Context, req CreateGroupReq) (CreateGroupRes, error)
	// CreatePet implements createPet operation.
	//
	// Creates a new Pet and persists it to storage.
	//
	// POST /pets
	CreatePet(ctx context.Context, req CreatePetReq) (CreatePetRes, error)
	// CreatePokemon implements createPokemon operation.
	//
	// Creates a new Pokemon and persists it to storage.
	//
	// POST /pokemons
	CreatePokemon(ctx context.Context, req CreatePokemonReq) (CreatePokemonRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req CreateUserReq) (CreateUserRes, error)
	// DBHealth implements DBHealth operation.
	//
	// GET /db-health
	DBHealth(ctx context.Context) (DBHealthRes, error)
	// DeleteBattle implements deleteBattle operation.
	//
	// Deletes the Battle with the requested ID.
	//
	// DELETE /battles/{id}
	DeleteBattle(ctx context.Context, params DeleteBattleParams) (DeleteBattleRes, error)
	// DeleteCar implements deleteCar operation.
	//
	// Deletes the Car with the requested ID.
	//
	// DELETE /cars/{id}
	DeleteCar(ctx context.Context, params DeleteCarParams) (DeleteCarRes, error)
	// DeleteGroup implements deleteGroup operation.
	//
	// Deletes the Group with the requested ID.
	//
	// DELETE /groups/{id}
	DeleteGroup(ctx context.Context, params DeleteGroupParams) (DeleteGroupRes, error)
	// DeletePet implements deletePet operation.
	//
	// Deletes the Pet with the requested ID.
	//
	// DELETE /pets/{id}
	DeletePet(ctx context.Context, params DeletePetParams) (DeletePetRes, error)
	// DeletePokemon implements deletePokemon operation.
	//
	// Deletes the Pokemon with the requested ID.
	//
	// DELETE /pokemons/{id}
	DeletePokemon(ctx context.Context, params DeletePokemonParams) (DeletePokemonRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListBattle implements listBattle operation.
	//
	// List Battles.
	//
	// GET /battles
	ListBattle(ctx context.Context, params ListBattleParams) (ListBattleRes, error)
	// ListCar implements listCar operation.
	//
	// List Cars.
	//
	// GET /cars
	ListCar(ctx context.Context, params ListCarParams) (ListCarRes, error)
	// ListCarCars implements listCarCars operation.
	//
	// List attached Cars.
	//
	// GET /cars/{id}/cars
	ListCarCars(ctx context.Context, params ListCarCarsParams) (ListCarCarsRes, error)
	// ListGroup implements listGroup operation.
	//
	// List Groups.
	//
	// GET /groups
	ListGroup(ctx context.Context, params ListGroupParams) (ListGroupRes, error)
	// ListGroupUsers implements listGroupUsers operation.
	//
	// List attached Users.
	//
	// GET /groups/{id}/users
	ListGroupUsers(ctx context.Context, params ListGroupUsersParams) (ListGroupUsersRes, error)
	// ListPet implements listPet operation.
	//
	// List Pets.
	//
	// GET /pets
	ListPet(ctx context.Context, params ListPetParams) (ListPetRes, error)
	// ListPokemon implements listPokemon operation.
	//
	// List Pokemons.
	//
	// GET /pokemons
	ListPokemon(ctx context.Context, params ListPokemonParams) (ListPokemonRes, error)
	// ListPokemonFights implements listPokemonFights operation.
	//
	// List attached Fights.
	//
	// GET /pokemons/{id}/fights
	ListPokemonFights(ctx context.Context, params ListPokemonFightsParams) (ListPokemonFightsRes, error)
	// ListPokemonOpponents implements listPokemonOpponents operation.
	//
	// List attached Opponents.
	//
	// GET /pokemons/{id}/opponents
	ListPokemonOpponents(ctx context.Context, params ListPokemonOpponentsParams) (ListPokemonOpponentsRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserCars implements listUserCars operation.
	//
	// List attached Cars.
	//
	// GET /users/{id}/cars
	ListUserCars(ctx context.Context, params ListUserCarsParams) (ListUserCarsRes, error)
	// ListUserGroups implements listUserGroups operation.
	//
	// List attached Groups.
	//
	// GET /users/{id}/groups
	ListUserGroups(ctx context.Context, params ListUserGroupsParams) (ListUserGroupsRes, error)
	// ReadBattle implements readBattle operation.
	//
	// Finds the Battle with the requested ID and returns it.
	//
	// GET /battles/{id}
	ReadBattle(ctx context.Context, params ReadBattleParams) (ReadBattleRes, error)
	// ReadBattleContender implements readBattleContender operation.
	//
	// Find the attached Pokemon of the Battle with the given ID.
	//
	// GET /battles/{id}/contender
	ReadBattleContender(ctx context.Context, params ReadBattleContenderParams) (ReadBattleContenderRes, error)
	// ReadBattleOponent implements readBattleOponent operation.
	//
	// Find the attached Pokemon of the Battle with the given ID.
	//
	// GET /battles/{id}/oponent
	ReadBattleOponent(ctx context.Context, params ReadBattleOponentParams) (ReadBattleOponentRes, error)
	// ReadCar implements readCar operation.
	//
	// Finds the Car with the requested ID and returns it.
	//
	// GET /cars/{id}
	ReadCar(ctx context.Context, params ReadCarParams) (ReadCarRes, error)
	// ReadGroup implements readGroup operation.
	//
	// Finds the Group with the requested ID and returns it.
	//
	// GET /groups/{id}
	ReadGroup(ctx context.Context, params ReadGroupParams) (ReadGroupRes, error)
	// ReadPet implements readPet operation.
	//
	// Finds the Pet with the requested ID and returns it.
	//
	// GET /pets/{id}
	ReadPet(ctx context.Context, params ReadPetParams) (ReadPetRes, error)
	// ReadPokemon implements readPokemon operation.
	//
	// Finds the Pokemon with the requested ID and returns it.
	//
	// GET /pokemons/{id}
	ReadPokemon(ctx context.Context, params ReadPokemonParams) (ReadPokemonRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// UpdateBattle implements updateBattle operation.
	//
	// Updates a Battle and persists changes to storage.
	//
	// PATCH /battles/{id}
	UpdateBattle(ctx context.Context, req UpdateBattleReq, params UpdateBattleParams) (UpdateBattleRes, error)
	// UpdateCar implements updateCar operation.
	//
	// Updates a Car and persists changes to storage.
	//
	// PATCH /cars/{id}
	UpdateCar(ctx context.Context, req UpdateCarReq, params UpdateCarParams) (UpdateCarRes, error)
	// UpdateGroup implements updateGroup operation.
	//
	// Updates a Group and persists changes to storage.
	//
	// PATCH /groups/{id}
	UpdateGroup(ctx context.Context, req UpdateGroupReq, params UpdateGroupParams) (UpdateGroupRes, error)
	// UpdatePet implements updatePet operation.
	//
	// Updates a Pet and persists changes to storage.
	//
	// PATCH /pets/{id}
	UpdatePet(ctx context.Context, req UpdatePetReq, params UpdatePetParams) (UpdatePetRes, error)
	// UpdatePokemon implements updatePokemon operation.
	//
	// Updates a Pokemon and persists changes to storage.
	//
	// PATCH /pokemons/{id}
	UpdatePokemon(ctx context.Context, req UpdatePokemonReq, params UpdatePokemonParams) (UpdatePokemonRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	cfg config

	requests metric.Int64Counter
	errors   metric.Int64Counter
	duration metric.Int64Histogram
}

func NewServer(h Handler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.NewInt64Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.NewInt64Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.NewInt64Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
