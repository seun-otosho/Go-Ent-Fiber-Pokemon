// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"strings"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

func (s *Server) notAllowed(w http.ResponseWriter, r *http.Request, allowed string) {
	s.cfg.MethodNotAllowed(w, r, allowed)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "battles"
				if l := len("battles"); len(elem) >= l && elem[0:l] == "battles" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListBattleRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateBattleRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteBattleRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadBattleRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateBattleRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "contender"
							if l := len("contender"); len(elem) >= l && elem[0:l] == "contender" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadBattleContenderRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'o': // Prefix: "oponent"
							if l := len("oponent"); len(elem) >= l && elem[0:l] == "oponent" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadBattleOponentRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'c': // Prefix: "cars"
				if l := len("cars"); len(elem) >= l && elem[0:l] == "cars" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListCarRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateCarRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteCarRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadCarRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateCarRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
				}
			case 'd': // Prefix: "db-health"
				if l := len("db-health"); len(elem) >= l && elem[0:l] == "db-health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleDBHealthRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListGroupRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateGroupRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteGroupRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadGroupRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateGroupRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/users"
						if l := len("/users"); len(elem) >= l && elem[0:l] == "/users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListGroupUsersRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'n': // Prefix: "notes"
				if l := len("notes"); len(elem) >= l && elem[0:l] == "notes" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListNoteRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateNoteRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteNoteRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadNoteRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateNoteRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
				}
			case 'p': // Prefix: "p"
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ets"
					if l := len("ets"); len(elem) >= l && elem[0:l] == "ets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListPetRequest([0]string{}, w, r)
						case "POST":
							s.handleCreatePetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeletePetRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadPetRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdatePetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
					}
				case 'o': // Prefix: "okemons"
					if l := len("okemons"); len(elem) >= l && elem[0:l] == "okemons" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListPokemonRequest([0]string{}, w, r)
						case "POST":
							s.handleCreatePokemonRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeletePokemonRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadPokemonRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdatePokemonRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "fights"
								if l := len("fights"); len(elem) >= l && elem[0:l] == "fights" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListPokemonFightsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'o': // Prefix: "opponents"
								if l := len("opponents"); len(elem) >= l && elem[0:l] == "opponents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListPokemonOpponentsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				}
			case 't': // Prefix: "todos"
				if l := len("todos"); len(elem) >= l && elem[0:l] == "todos" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListTodoRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateTodoRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteTodoRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadTodoRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateTodoRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListUserRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateUserRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteUserRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadUserRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateUserRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cars"
							if l := len("cars"); len(elem) >= l && elem[0:l] == "cars" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserCarsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'g': // Prefix: "groups"
							if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserGroupsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "battles"
				if l := len("battles"); len(elem) >= l && elem[0:l] == "battles" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListBattle"
						r.operationID = "listBattle"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateBattle"
						r.operationID = "createBattle"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteBattle"
							r.operationID = "deleteBattle"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadBattle"
							r.operationID = "readBattle"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateBattle"
							r.operationID = "updateBattle"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "contender"
							if l := len("contender"); len(elem) >= l && elem[0:l] == "contender" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadBattleContender
									r.name = "ReadBattleContender"
									r.operationID = "readBattleContender"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'o': // Prefix: "oponent"
							if l := len("oponent"); len(elem) >= l && elem[0:l] == "oponent" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadBattleOponent
									r.name = "ReadBattleOponent"
									r.operationID = "readBattleOponent"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'c': // Prefix: "cars"
				if l := len("cars"); len(elem) >= l && elem[0:l] == "cars" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListCar"
						r.operationID = "listCar"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateCar"
						r.operationID = "createCar"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteCar
							r.name = "DeleteCar"
							r.operationID = "deleteCar"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadCar
							r.name = "ReadCar"
							r.operationID = "readCar"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							// Leaf: UpdateCar
							r.name = "UpdateCar"
							r.operationID = "updateCar"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'd': // Prefix: "db-health"
				if l := len("db-health"); len(elem) >= l && elem[0:l] == "db-health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: DBHealth
						r.name = "DBHealth"
						r.operationID = "DBHealth"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListGroup"
						r.operationID = "listGroup"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateGroup"
						r.operationID = "createGroup"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteGroup"
							r.operationID = "deleteGroup"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadGroup"
							r.operationID = "readGroup"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateGroup"
							r.operationID = "updateGroup"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/users"
						if l := len("/users"); len(elem) >= l && elem[0:l] == "/users" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ListGroupUsers
								r.name = "ListGroupUsers"
								r.operationID = "listGroupUsers"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'n': // Prefix: "notes"
				if l := len("notes"); len(elem) >= l && elem[0:l] == "notes" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListNote"
						r.operationID = "listNote"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateNote"
						r.operationID = "createNote"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteNote
							r.name = "DeleteNote"
							r.operationID = "deleteNote"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadNote
							r.name = "ReadNote"
							r.operationID = "readNote"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							// Leaf: UpdateNote
							r.name = "UpdateNote"
							r.operationID = "updateNote"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'p': // Prefix: "p"
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ets"
					if l := len("ets"); len(elem) >= l && elem[0:l] == "ets" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListPet"
							r.operationID = "listPet"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreatePet"
							r.operationID = "createPet"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: DeletePet
								r.name = "DeletePet"
								r.operationID = "deletePet"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								// Leaf: ReadPet
								r.name = "ReadPet"
								r.operationID = "readPet"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								// Leaf: UpdatePet
								r.name = "UpdatePet"
								r.operationID = "updatePet"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 'o': // Prefix: "okemons"
					if l := len("okemons"); len(elem) >= l && elem[0:l] == "okemons" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListPokemon"
							r.operationID = "listPokemon"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreatePokemon"
							r.operationID = "createPokemon"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeletePokemon"
								r.operationID = "deletePokemon"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadPokemon"
								r.operationID = "readPokemon"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdatePokemon"
								r.operationID = "updatePokemon"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "fights"
								if l := len("fights"); len(elem) >= l && elem[0:l] == "fights" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListPokemonFights
										r.name = "ListPokemonFights"
										r.operationID = "listPokemonFights"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'o': // Prefix: "opponents"
								if l := len("opponents"); len(elem) >= l && elem[0:l] == "opponents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListPokemonOpponents
										r.name = "ListPokemonOpponents"
										r.operationID = "listPokemonOpponents"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			case 't': // Prefix: "todos"
				if l := len("todos"); len(elem) >= l && elem[0:l] == "todos" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListTodo"
						r.operationID = "listTodo"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateTodo"
						r.operationID = "createTodo"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteTodo
							r.name = "DeleteTodo"
							r.operationID = "deleteTodo"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadTodo
							r.name = "ReadTodo"
							r.operationID = "readTodo"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							// Leaf: UpdateTodo
							r.name = "UpdateTodo"
							r.operationID = "updateTodo"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListUser"
						r.operationID = "listUser"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateUser"
						r.operationID = "createUser"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteUser"
							r.operationID = "deleteUser"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadUser"
							r.operationID = "readUser"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateUser"
							r.operationID = "updateUser"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cars"
							if l := len("cars"); len(elem) >= l && elem[0:l] == "cars" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserCars
									r.name = "ListUserCars"
									r.operationID = "listUserCars"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'g': // Prefix: "groups"
							if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserGroups
									r.name = "ListUserGroups"
									r.operationID = "listUserGroups"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
