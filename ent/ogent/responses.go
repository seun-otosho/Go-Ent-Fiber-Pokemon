// Code generated by ent, DO NOT EDIT.

package ogent

import "GoEntFiberPokeman/ent"

func NewBattleCreate(e *ent.Battle) *BattleCreate {
	if e == nil {
		return nil
	}
	var ret BattleCreate
	ret.ID = e.ID
	ret.Result = e.Result
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewBattleCreates(es []*ent.Battle) []BattleCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]BattleCreate, len(es))
	for i, e := range es {
		r[i] = NewBattleCreate(e).Elem()
	}
	return r
}

func (b *BattleCreate) Elem() BattleCreate {
	if b == nil {
		return BattleCreate{}
	}
	return *b
}

func NewBattleList(e *ent.Battle) *BattleList {
	if e == nil {
		return nil
	}
	var ret BattleList
	ret.ID = e.ID
	ret.Result = e.Result
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewBattleLists(es []*ent.Battle) []BattleList {
	if len(es) == 0 {
		return nil
	}
	r := make([]BattleList, len(es))
	for i, e := range es {
		r[i] = NewBattleList(e).Elem()
	}
	return r
}

func (b *BattleList) Elem() BattleList {
	if b == nil {
		return BattleList{}
	}
	return *b
}

func NewBattleRead(e *ent.Battle) *BattleRead {
	if e == nil {
		return nil
	}
	var ret BattleRead
	ret.ID = e.ID
	ret.Result = e.Result
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewBattleReads(es []*ent.Battle) []BattleRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]BattleRead, len(es))
	for i, e := range es {
		r[i] = NewBattleRead(e).Elem()
	}
	return r
}

func (b *BattleRead) Elem() BattleRead {
	if b == nil {
		return BattleRead{}
	}
	return *b
}

func NewBattleUpdate(e *ent.Battle) *BattleUpdate {
	if e == nil {
		return nil
	}
	var ret BattleUpdate
	ret.ID = e.ID
	ret.Result = e.Result
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewBattleUpdates(es []*ent.Battle) []BattleUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]BattleUpdate, len(es))
	for i, e := range es {
		r[i] = NewBattleUpdate(e).Elem()
	}
	return r
}

func (b *BattleUpdate) Elem() BattleUpdate {
	if b == nil {
		return BattleUpdate{}
	}
	return *b
}

func NewBattleContenderRead(e *ent.Pokemon) *BattleContenderRead {
	if e == nil {
		return nil
	}
	var ret BattleContenderRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.Weight = e.Weight
	ret.Height = e.Height
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewBattleContenderReads(es []*ent.Pokemon) []BattleContenderRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]BattleContenderRead, len(es))
	for i, e := range es {
		r[i] = NewBattleContenderRead(e).Elem()
	}
	return r
}

func (po *BattleContenderRead) Elem() BattleContenderRead {
	if po == nil {
		return BattleContenderRead{}
	}
	return *po
}

func NewBattleOponentRead(e *ent.Pokemon) *BattleOponentRead {
	if e == nil {
		return nil
	}
	var ret BattleOponentRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.Weight = e.Weight
	ret.Height = e.Height
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewBattleOponentReads(es []*ent.Pokemon) []BattleOponentRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]BattleOponentRead, len(es))
	for i, e := range es {
		r[i] = NewBattleOponentRead(e).Elem()
	}
	return r
}

func (po *BattleOponentRead) Elem() BattleOponentRead {
	if po == nil {
		return BattleOponentRead{}
	}
	return *po
}

func NewCarCreate(e *ent.Car) *CarCreate {
	if e == nil {
		return nil
	}
	var ret CarCreate
	ret.ID = e.ID
	ret.Model = e.Model
	ret.RegisteredAt = e.RegisteredAt
	return &ret
}

func NewCarCreates(es []*ent.Car) []CarCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CarCreate, len(es))
	for i, e := range es {
		r[i] = NewCarCreate(e).Elem()
	}
	return r
}

func (c *CarCreate) Elem() CarCreate {
	if c == nil {
		return CarCreate{}
	}
	return *c
}

func NewCarList(e *ent.Car) *CarList {
	if e == nil {
		return nil
	}
	var ret CarList
	ret.ID = e.ID
	ret.Model = e.Model
	ret.RegisteredAt = e.RegisteredAt
	return &ret
}

func NewCarLists(es []*ent.Car) []CarList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CarList, len(es))
	for i, e := range es {
		r[i] = NewCarList(e).Elem()
	}
	return r
}

func (c *CarList) Elem() CarList {
	if c == nil {
		return CarList{}
	}
	return *c
}

func NewCarRead(e *ent.Car) *CarRead {
	if e == nil {
		return nil
	}
	var ret CarRead
	ret.ID = e.ID
	ret.Model = e.Model
	ret.RegisteredAt = e.RegisteredAt
	return &ret
}

func NewCarReads(es []*ent.Car) []CarRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CarRead, len(es))
	for i, e := range es {
		r[i] = NewCarRead(e).Elem()
	}
	return r
}

func (c *CarRead) Elem() CarRead {
	if c == nil {
		return CarRead{}
	}
	return *c
}

func NewCarUpdate(e *ent.Car) *CarUpdate {
	if e == nil {
		return nil
	}
	var ret CarUpdate
	ret.ID = e.ID
	ret.Model = e.Model
	ret.RegisteredAt = e.RegisteredAt
	return &ret
}

func NewCarUpdates(es []*ent.Car) []CarUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CarUpdate, len(es))
	for i, e := range es {
		r[i] = NewCarUpdate(e).Elem()
	}
	return r
}

func (c *CarUpdate) Elem() CarUpdate {
	if c == nil {
		return CarUpdate{}
	}
	return *c
}

func NewGroupCreate(e *ent.Group) *GroupCreate {
	if e == nil {
		return nil
	}
	var ret GroupCreate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewGroupCreates(es []*ent.Group) []GroupCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupCreate, len(es))
	for i, e := range es {
		r[i] = NewGroupCreate(e).Elem()
	}
	return r
}

func (gr *GroupCreate) Elem() GroupCreate {
	if gr == nil {
		return GroupCreate{}
	}
	return *gr
}

func NewGroupList(e *ent.Group) *GroupList {
	if e == nil {
		return nil
	}
	var ret GroupList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewGroupLists(es []*ent.Group) []GroupList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupList, len(es))
	for i, e := range es {
		r[i] = NewGroupList(e).Elem()
	}
	return r
}

func (gr *GroupList) Elem() GroupList {
	if gr == nil {
		return GroupList{}
	}
	return *gr
}

func NewGroupRead(e *ent.Group) *GroupRead {
	if e == nil {
		return nil
	}
	var ret GroupRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewGroupReads(es []*ent.Group) []GroupRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupRead, len(es))
	for i, e := range es {
		r[i] = NewGroupRead(e).Elem()
	}
	return r
}

func (gr *GroupRead) Elem() GroupRead {
	if gr == nil {
		return GroupRead{}
	}
	return *gr
}

func NewGroupUpdate(e *ent.Group) *GroupUpdate {
	if e == nil {
		return nil
	}
	var ret GroupUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewGroupUpdates(es []*ent.Group) []GroupUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupUpdate, len(es))
	for i, e := range es {
		r[i] = NewGroupUpdate(e).Elem()
	}
	return r
}

func (gr *GroupUpdate) Elem() GroupUpdate {
	if gr == nil {
		return GroupUpdate{}
	}
	return *gr
}

func NewGroupUsersList(e *ent.User) *GroupUsersList {
	if e == nil {
		return nil
	}
	var ret GroupUsersList
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewGroupUsersLists(es []*ent.User) []GroupUsersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupUsersList, len(es))
	for i, e := range es {
		r[i] = NewGroupUsersList(e).Elem()
	}
	return r
}

func (u *GroupUsersList) Elem() GroupUsersList {
	if u == nil {
		return GroupUsersList{}
	}
	return *u
}

func NewPetCreate(e *ent.Pet) *PetCreate {
	if e == nil {
		return nil
	}
	var ret PetCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Age = e.Age
	return &ret
}

func NewPetCreates(es []*ent.Pet) []PetCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PetCreate, len(es))
	for i, e := range es {
		r[i] = NewPetCreate(e).Elem()
	}
	return r
}

func (pe *PetCreate) Elem() PetCreate {
	if pe == nil {
		return PetCreate{}
	}
	return *pe
}

func NewPetList(e *ent.Pet) *PetList {
	if e == nil {
		return nil
	}
	var ret PetList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Age = e.Age
	return &ret
}

func NewPetLists(es []*ent.Pet) []PetList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PetList, len(es))
	for i, e := range es {
		r[i] = NewPetList(e).Elem()
	}
	return r
}

func (pe *PetList) Elem() PetList {
	if pe == nil {
		return PetList{}
	}
	return *pe
}

func NewPetRead(e *ent.Pet) *PetRead {
	if e == nil {
		return nil
	}
	var ret PetRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Age = e.Age
	return &ret
}

func NewPetReads(es []*ent.Pet) []PetRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PetRead, len(es))
	for i, e := range es {
		r[i] = NewPetRead(e).Elem()
	}
	return r
}

func (pe *PetRead) Elem() PetRead {
	if pe == nil {
		return PetRead{}
	}
	return *pe
}

func NewPetUpdate(e *ent.Pet) *PetUpdate {
	if e == nil {
		return nil
	}
	var ret PetUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Age = e.Age
	return &ret
}

func NewPetUpdates(es []*ent.Pet) []PetUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PetUpdate, len(es))
	for i, e := range es {
		r[i] = NewPetUpdate(e).Elem()
	}
	return r
}

func (pe *PetUpdate) Elem() PetUpdate {
	if pe == nil {
		return PetUpdate{}
	}
	return *pe
}

func NewPokemonCreate(e *ent.Pokemon) *PokemonCreate {
	if e == nil {
		return nil
	}
	var ret PokemonCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.Weight = e.Weight
	ret.Height = e.Height
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewPokemonCreates(es []*ent.Pokemon) []PokemonCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PokemonCreate, len(es))
	for i, e := range es {
		r[i] = NewPokemonCreate(e).Elem()
	}
	return r
}

func (po *PokemonCreate) Elem() PokemonCreate {
	if po == nil {
		return PokemonCreate{}
	}
	return *po
}

func NewPokemonList(e *ent.Pokemon) *PokemonList {
	if e == nil {
		return nil
	}
	var ret PokemonList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.Weight = e.Weight
	ret.Height = e.Height
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewPokemonLists(es []*ent.Pokemon) []PokemonList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PokemonList, len(es))
	for i, e := range es {
		r[i] = NewPokemonList(e).Elem()
	}
	return r
}

func (po *PokemonList) Elem() PokemonList {
	if po == nil {
		return PokemonList{}
	}
	return *po
}

func NewPokemonRead(e *ent.Pokemon) *PokemonRead {
	if e == nil {
		return nil
	}
	var ret PokemonRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.Weight = e.Weight
	ret.Height = e.Height
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewPokemonReads(es []*ent.Pokemon) []PokemonRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PokemonRead, len(es))
	for i, e := range es {
		r[i] = NewPokemonRead(e).Elem()
	}
	return r
}

func (po *PokemonRead) Elem() PokemonRead {
	if po == nil {
		return PokemonRead{}
	}
	return *po
}

func NewPokemonUpdate(e *ent.Pokemon) *PokemonUpdate {
	if e == nil {
		return nil
	}
	var ret PokemonUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Description = e.Description
	ret.Weight = e.Weight
	ret.Height = e.Height
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewPokemonUpdates(es []*ent.Pokemon) []PokemonUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PokemonUpdate, len(es))
	for i, e := range es {
		r[i] = NewPokemonUpdate(e).Elem()
	}
	return r
}

func (po *PokemonUpdate) Elem() PokemonUpdate {
	if po == nil {
		return PokemonUpdate{}
	}
	return *po
}

func NewPokemonFightsList(e *ent.Battle) *PokemonFightsList {
	if e == nil {
		return nil
	}
	var ret PokemonFightsList
	ret.ID = e.ID
	ret.Result = e.Result
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewPokemonFightsLists(es []*ent.Battle) []PokemonFightsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PokemonFightsList, len(es))
	for i, e := range es {
		r[i] = NewPokemonFightsList(e).Elem()
	}
	return r
}

func (b *PokemonFightsList) Elem() PokemonFightsList {
	if b == nil {
		return PokemonFightsList{}
	}
	return *b
}

func NewPokemonOpponentsList(e *ent.Battle) *PokemonOpponentsList {
	if e == nil {
		return nil
	}
	var ret PokemonOpponentsList
	ret.ID = e.ID
	ret.Result = e.Result
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewPokemonOpponentsLists(es []*ent.Battle) []PokemonOpponentsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PokemonOpponentsList, len(es))
	for i, e := range es {
		r[i] = NewPokemonOpponentsList(e).Elem()
	}
	return r
}

func (b *PokemonOpponentsList) Elem() PokemonOpponentsList {
	if b == nil {
		return PokemonOpponentsList{}
	}
	return *b
}

func NewUserCreate(e *ent.User) *UserCreate {
	if e == nil {
		return nil
	}
	var ret UserCreate
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewUserCreates(es []*ent.User) []UserCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserCreate, len(es))
	for i, e := range es {
		r[i] = NewUserCreate(e).Elem()
	}
	return r
}

func (u *UserCreate) Elem() UserCreate {
	if u == nil {
		return UserCreate{}
	}
	return *u
}

func NewUserList(e *ent.User) *UserList {
	if e == nil {
		return nil
	}
	var ret UserList
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewUserLists(es []*ent.User) []UserList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserList, len(es))
	for i, e := range es {
		r[i] = NewUserList(e).Elem()
	}
	return r
}

func (u *UserList) Elem() UserList {
	if u == nil {
		return UserList{}
	}
	return *u
}

func NewUserRead(e *ent.User) *UserRead {
	if e == nil {
		return nil
	}
	var ret UserRead
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewUserReads(es []*ent.User) []UserRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserRead, len(es))
	for i, e := range es {
		r[i] = NewUserRead(e).Elem()
	}
	return r
}

func (u *UserRead) Elem() UserRead {
	if u == nil {
		return UserRead{}
	}
	return *u
}

func NewUserUpdate(e *ent.User) *UserUpdate {
	if e == nil {
		return nil
	}
	var ret UserUpdate
	ret.ID = e.ID
	ret.Age = e.Age
	ret.Name = e.Name
	return &ret
}

func NewUserUpdates(es []*ent.User) []UserUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserUpdate, len(es))
	for i, e := range es {
		r[i] = NewUserUpdate(e).Elem()
	}
	return r
}

func (u *UserUpdate) Elem() UserUpdate {
	if u == nil {
		return UserUpdate{}
	}
	return *u
}

func NewUserCarsList(e *ent.Car) *UserCarsList {
	if e == nil {
		return nil
	}
	var ret UserCarsList
	ret.ID = e.ID
	ret.Model = e.Model
	ret.RegisteredAt = e.RegisteredAt
	return &ret
}

func NewUserCarsLists(es []*ent.Car) []UserCarsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserCarsList, len(es))
	for i, e := range es {
		r[i] = NewUserCarsList(e).Elem()
	}
	return r
}

func (c *UserCarsList) Elem() UserCarsList {
	if c == nil {
		return UserCarsList{}
	}
	return *c
}

func NewUserGroupsList(e *ent.Group) *UserGroupsList {
	if e == nil {
		return nil
	}
	var ret UserGroupsList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewUserGroupsLists(es []*ent.Group) []UserGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserGroupsList, len(es))
	for i, e := range es {
		r[i] = NewUserGroupsList(e).Elem()
	}
	return r
}

func (gr *UserGroupsList) Elem() UserGroupsList {
	if gr == nil {
		return UserGroupsList{}
	}
	return *gr
}
