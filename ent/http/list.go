// Code generated by ent, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/mailru/easyjson"
	"go.uber.org/zap"
)

// Read fetches the ent.Battle identified by a given url-parameter from the
// database and returns it to the client.
func (h *BattleHandler) List(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Battle.Query()
	var err error
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching battles from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("battles rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewBattle2279316362Views(es), w)
}

// Read fetches the ent.Car identified by a given url-parameter from the
// database and returns it to the client.
func (h *CarHandler) List(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Car.Query()
	var err error
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching cars from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("cars rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewCar2526155363Views(es), w)
}

// Read fetches the ent.Group identified by a given url-parameter from the
// database and returns it to the client.
func (h *GroupHandler) List(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Group.Query()
	var err error
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching groups from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("groups rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewGroup2834184090Views(es), w)
}

// Read fetches the ent.Pet identified by a given url-parameter from the
// database and returns it to the client.
func (h *PetHandler) List(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Pet.Query()
	var err error
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPet359800019Views(es), w)
}

// Read fetches the ent.Pokemon identified by a given url-parameter from the
// database and returns it to the client.
func (h *PokemonHandler) List(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Pokemon.Query()
	var err error
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pokemons from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("pokemons rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPokemon2727375384Views(es), w)
}

// Read fetches the ent.User identified by a given url-parameter from the
// database and returns it to the client.
func (h *UserHandler) List(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.User.Query()
	var err error
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching users from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("users rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewUser2570247333Views(es), w)
}
