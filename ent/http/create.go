// Code generated by ent, DO NOT EDIT.

package http

import (
	"GoEntFiberPokeman/ent"
	"GoEntFiberPokeman/ent/battle"
	"GoEntFiberPokeman/ent/car"
	"GoEntFiberPokeman/ent/group"
	"GoEntFiberPokeman/ent/pet"
	"GoEntFiberPokeman/ent/pokemon"
	"GoEntFiberPokeman/ent/user"
	"net/http"
	"strings"

	"github.com/mailru/easyjson"
	"go.uber.org/zap"
)

// Create creates a new ent.Battle and stores it in the database.
func (h BattleHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d BattleCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Battle.Create()
	if d.Result != nil {
		b.SetResult(*d.Result)
	}
	if d.CreatedAt != nil {
		b.SetCreatedAt(*d.CreatedAt)
	}
	if d.UpdatedAt != nil {
		b.SetUpdatedAt(*d.UpdatedAt)
	}
	if d.Contender != nil {
		b.SetContenderID(*d.Contender)
	}
	if d.Oponent != nil {
		b.SetOponentID(*d.Oponent)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create battle", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Battle.Query().Where(battle.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read battle", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("battle rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewBattle2279316362View(ret), w)
}

// Create creates a new ent.Car and stores it in the database.
func (h CarHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d CarCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Car.Create()
	if d.Model != nil {
		b.SetModel(*d.Model)
	}
	if d.RegisteredAt != nil {
		b.SetRegisteredAt(*d.RegisteredAt)
	}
	if d.Cars != nil {
		b.AddCarIDs(d.Cars...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create car", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Car.Query().Where(car.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read car", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("car rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewCar2526155363View(ret), w)
}

// Create creates a new ent.Group and stores it in the database.
func (h GroupHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d GroupCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Validate the data.
	errs := make(map[string]string)
	if d.Name == nil {
		errs["name"] = `missing required field: "name"`
	} else if err := group.NameValidator(*d.Name); err != nil {
		errs["name"] = strings.TrimPrefix(err.Error(), "group: ")
	}
	if len(errs) > 0 {
		l.Info("validation failed", zapFields(errs)...)
		BadRequest(w, errs)
		return
	}
	// Save the data.
	b := h.client.Group.Create()
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Users != nil {
		b.AddUserIDs(d.Users...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create group", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Group.Query().Where(group.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read group", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("group rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewGroup2834184090View(ret), w)
}

// Create creates a new ent.Pet and stores it in the database.
func (h PetHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d PetCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Pet.Create()
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create pet", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read pet", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("pet rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewPet359800019View(ret), w)
}

// Create creates a new ent.Pokemon and stores it in the database.
func (h PokemonHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d PokemonCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Validate the data.
	errs := make(map[string]string)
	if d.Name == nil {
		errs["name"] = `missing required field: "name"`
	} else if err := pokemon.NameValidator(*d.Name); err != nil {
		errs["name"] = strings.TrimPrefix(err.Error(), "pokemon: ")
	}
	if d.Description == nil {
		errs["description"] = `missing required field: "description"`
	} else if err := pokemon.DescriptionValidator(*d.Description); err != nil {
		errs["description"] = strings.TrimPrefix(err.Error(), "pokemon: ")
	}
	if d.Weight == nil {
		errs["weight"] = `missing required field: "weight"`
	}
	if d.Height == nil {
		errs["height"] = `missing required field: "height"`
	}
	if len(errs) > 0 {
		l.Info("validation failed", zapFields(errs)...)
		BadRequest(w, errs)
		return
	}
	// Save the data.
	b := h.client.Pokemon.Create()
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Description != nil {
		b.SetDescription(*d.Description)
	}
	if d.Weight != nil {
		b.SetWeight(*d.Weight)
	}
	if d.Height != nil {
		b.SetHeight(*d.Height)
	}
	if d.CreatedAt != nil {
		b.SetCreatedAt(*d.CreatedAt)
	}
	if d.UpdatedAt != nil {
		b.SetUpdatedAt(*d.UpdatedAt)
	}
	if d.Fights != nil {
		b.AddFightIDs(d.Fights...)
	}
	if d.Opponents != nil {
		b.AddOpponentIDs(d.Opponents...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create pokemon", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.Pokemon.Query().Where(pokemon.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read pokemon", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("pokemon rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewPokemon2727375384View(ret), w)
}

// Create creates a new ent.User and stores it in the database.
func (h UserHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d UserCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		BadRequest(w, "invalid json string")
		return
	}
	// Validate the data.
	errs := make(map[string]string)
	if d.Age == nil {
		errs["age"] = `missing required field: "age"`
	} else if err := user.AgeValidator(*d.Age); err != nil {
		errs["age"] = strings.TrimPrefix(err.Error(), "user: ")
	}
	if len(errs) > 0 {
		l.Info("validation failed", zapFields(errs)...)
		BadRequest(w, errs)
		return
	}
	// Save the data.
	b := h.client.User.Create()
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Cars != nil {
		b.AddCarIDs(d.Cars...)
	}
	if d.Groups != nil {
		b.AddGroupIDs(d.Groups...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create user", zap.Error(err))
			InternalServerError(w, nil)
		}
		return
	}
	// Store id of fresh entity to log errors for the reload.
	id := e.ID
	// Reload entry.
	q := h.client.User.Query().Where(user.ID(e.ID))
	ret, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could not read user", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("user rendered", zap.Int("id", id))
	easyjson.MarshalToHTTPResponseWriter(NewUser2570247333View(ret), w)
}
