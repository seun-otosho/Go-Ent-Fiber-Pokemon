// Code generated by ent, DO NOT EDIT.

package http

import (
	"GoEntFiberPokeman/ent"
	"net/http"
	"strconv"
	"time"

	"github.com/mailru/easyjson"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// Battle2279316362View represents the data serialized for the following serialization group combinations:
	// []
	Battle2279316362View struct {
		ID        int       `json:"oid,omitempty"`
		Result    string    `json:"result,omitempty"`
		CreatedAt time.Time `json:"created_at,omitempty"`
		UpdatedAt time.Time `json:"updated_at,omitempty"`
	}
	Battle2279316362Views []*Battle2279316362View
)

func NewBattle2279316362View(e *ent.Battle) *Battle2279316362View {
	if e == nil {
		return nil
	}
	return &Battle2279316362View{
		ID:        e.ID,
		Result:    e.Result,
		CreatedAt: e.CreatedAt,
		UpdatedAt: e.UpdatedAt,
	}
}

func NewBattle2279316362Views(es []*ent.Battle) Battle2279316362Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Battle2279316362Views, len(es))
	for i, e := range es {
		r[i] = NewBattle2279316362View(e)
	}
	return r
}

type (
	// Car2526155363View represents the data serialized for the following serialization group combinations:
	// []
	Car2526155363View struct {
		ID           int       `json:"id,omitempty"`
		Model        string    `json:"model,omitempty"`
		RegisteredAt time.Time `json:"registered_at,omitempty"`
	}
	Car2526155363Views []*Car2526155363View
)

func NewCar2526155363View(e *ent.Car) *Car2526155363View {
	if e == nil {
		return nil
	}
	return &Car2526155363View{
		ID:           e.ID,
		Model:        e.Model,
		RegisteredAt: e.RegisteredAt,
	}
}

func NewCar2526155363Views(es []*ent.Car) Car2526155363Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Car2526155363Views, len(es))
	for i, e := range es {
		r[i] = NewCar2526155363View(e)
	}
	return r
}

type (
	// Group2834184090View represents the data serialized for the following serialization group combinations:
	// []
	Group2834184090View struct {
		ID   int    `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
	}
	Group2834184090Views []*Group2834184090View
)

func NewGroup2834184090View(e *ent.Group) *Group2834184090View {
	if e == nil {
		return nil
	}
	return &Group2834184090View{
		ID:   e.ID,
		Name: e.Name,
	}
}

func NewGroup2834184090Views(es []*ent.Group) Group2834184090Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Group2834184090Views, len(es))
	for i, e := range es {
		r[i] = NewGroup2834184090View(e)
	}
	return r
}

type (
	// Pet359800019View represents the data serialized for the following serialization group combinations:
	// []
	Pet359800019View struct {
		ID   int    `json:"id,omitempty"`
		Name string `json:"name,omitempty"`
		Age  int    `json:"age,omitempty"`
	}
	Pet359800019Views []*Pet359800019View
)

func NewPet359800019View(e *ent.Pet) *Pet359800019View {
	if e == nil {
		return nil
	}
	return &Pet359800019View{
		ID:   e.ID,
		Name: e.Name,
		Age:  e.Age,
	}
}

func NewPet359800019Views(es []*ent.Pet) Pet359800019Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Pet359800019Views, len(es))
	for i, e := range es {
		r[i] = NewPet359800019View(e)
	}
	return r
}

type (
	// Pokemon2727375384View represents the data serialized for the following serialization group combinations:
	// []
	Pokemon2727375384View struct {
		ID          int       `json:"oid,omitempty"`
		Name        string    `json:"name,omitempty"`
		Description string    `json:"description,omitempty"`
		Weight      float64   `json:"weight,omitempty"`
		Height      float64   `json:"height,omitempty"`
		CreatedAt   time.Time `json:"created_at,omitempty"`
		UpdatedAt   time.Time `json:"updated_at,omitempty"`
	}
	Pokemon2727375384Views []*Pokemon2727375384View
)

func NewPokemon2727375384View(e *ent.Pokemon) *Pokemon2727375384View {
	if e == nil {
		return nil
	}
	return &Pokemon2727375384View{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		Weight:      e.Weight,
		Height:      e.Height,
		CreatedAt:   e.CreatedAt,
		UpdatedAt:   e.UpdatedAt,
	}
}

func NewPokemon2727375384Views(es []*ent.Pokemon) Pokemon2727375384Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Pokemon2727375384Views, len(es))
	for i, e := range es {
		r[i] = NewPokemon2727375384View(e)
	}
	return r
}

type (
	// User2570247333View represents the data serialized for the following serialization group combinations:
	// []
	User2570247333View struct {
		ID   int    `json:"id,omitempty"`
		Age  int    `json:"age,omitempty"`
		Name string `json:"name,omitempty"`
	}
	User2570247333Views []*User2570247333View
)

func NewUser2570247333View(e *ent.User) *User2570247333View {
	if e == nil {
		return nil
	}
	return &User2570247333View{
		ID:   e.ID,
		Age:  e.Age,
		Name: e.Name,
	}
}

func NewUser2570247333Views(es []*ent.User) User2570247333Views {
	if len(es) == 0 {
		return nil
	}
	r := make(User2570247333Views, len(es))
	for i, e := range es {
		r[i] = NewUser2570247333View(e)
	}
	return r
}
