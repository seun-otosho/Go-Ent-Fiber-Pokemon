// Code generated by ent, DO NOT EDIT.

package http

import (
	"GoEntFiberPokeman/ent"
	"strings"

	"github.com/go-chi/chi/v5"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	MountRoutes(c, l, r)
	return r
}

// MountRoutes mounts all generated routes on the given router.
func MountRoutes(c *ent.Client, l *zap.Logger, r chi.Router) {
	NewBattleHandler(c, l).MountRoutes(r)
	NewCarHandler(c, l).MountRoutes(r)
	NewGroupHandler(c, l).MountRoutes(r)
	NewPetHandler(c, l).MountRoutes(r)
	NewPokemonHandler(c, l).MountRoutes(r)
	NewUserHandler(c, l).MountRoutes(r)
}

// BattleHandler handles http crud operations on ent.Battle.
type BattleHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewBattleHandler(c *ent.Client, l *zap.Logger) *BattleHandler {
	return &BattleHandler{
		client: c,
		log:    l.With(zap.String("handler", "BattleHandler")),
	}
}
func (h *BattleHandler) MountCreateRoute(r chi.Router) *BattleHandler {
	r.Post("/battles", h.Create)
	return h
}
func (h *BattleHandler) MountReadRoute(r chi.Router) *BattleHandler {
	r.Get("/battles/{id}", h.Read)
	return h
}
func (h *BattleHandler) MountUpdateRoute(r chi.Router) *BattleHandler {
	r.Patch("/battles/{id}", h.Update)
	return h
}
func (h *BattleHandler) MountDeleteRoute(r chi.Router) *BattleHandler {
	r.Delete("/battles/{id}", h.Delete)
	return h
}
func (h *BattleHandler) MountListRoute(r chi.Router) *BattleHandler {
	r.Get("/battles", h.List)
	return h
}
func (h *BattleHandler) MountContenderRoute(r chi.Router) *BattleHandler {
	r.Get("/battles/{id}/contender", h.Contender)
	return h
}
func (h *BattleHandler) MountOponentRoute(r chi.Router) *BattleHandler {
	r.Get("/battles/{id}/oponent", h.Oponent)
	return h
}
func (h *BattleHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountContenderRoute(r).MountOponentRoute(r)
}

// CarHandler handles http crud operations on ent.Car.
type CarHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewCarHandler(c *ent.Client, l *zap.Logger) *CarHandler {
	return &CarHandler{
		client: c,
		log:    l.With(zap.String("handler", "CarHandler")),
	}
}
func (h *CarHandler) MountCreateRoute(r chi.Router) *CarHandler {
	r.Post("/cars", h.Create)
	return h
}
func (h *CarHandler) MountReadRoute(r chi.Router) *CarHandler {
	r.Get("/cars/{id}", h.Read)
	return h
}
func (h *CarHandler) MountUpdateRoute(r chi.Router) *CarHandler {
	r.Patch("/cars/{id}", h.Update)
	return h
}
func (h *CarHandler) MountDeleteRoute(r chi.Router) *CarHandler {
	r.Delete("/cars/{id}", h.Delete)
	return h
}
func (h *CarHandler) MountListRoute(r chi.Router) *CarHandler {
	r.Get("/cars", h.List)
	return h
}
func (h *CarHandler) MountCarsRoute(r chi.Router) *CarHandler {
	r.Get("/cars/{id}/cars", h.Cars)
	return h
}
func (h *CarHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountCarsRoute(r)
}

// GroupHandler handles http crud operations on ent.Group.
type GroupHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewGroupHandler(c *ent.Client, l *zap.Logger) *GroupHandler {
	return &GroupHandler{
		client: c,
		log:    l.With(zap.String("handler", "GroupHandler")),
	}
}
func (h *GroupHandler) MountCreateRoute(r chi.Router) *GroupHandler {
	r.Post("/groups", h.Create)
	return h
}
func (h *GroupHandler) MountReadRoute(r chi.Router) *GroupHandler {
	r.Get("/groups/{id}", h.Read)
	return h
}
func (h *GroupHandler) MountUpdateRoute(r chi.Router) *GroupHandler {
	r.Patch("/groups/{id}", h.Update)
	return h
}
func (h *GroupHandler) MountDeleteRoute(r chi.Router) *GroupHandler {
	r.Delete("/groups/{id}", h.Delete)
	return h
}
func (h *GroupHandler) MountListRoute(r chi.Router) *GroupHandler {
	r.Get("/groups", h.List)
	return h
}
func (h *GroupHandler) MountUsersRoute(r chi.Router) *GroupHandler {
	r.Get("/groups/{id}/users", h.Users)
	return h
}
func (h *GroupHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountUsersRoute(r)
}

// PetHandler handles http crud operations on ent.Pet.
type PetHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPetHandler(c *ent.Client, l *zap.Logger) *PetHandler {
	return &PetHandler{
		client: c,
		log:    l.With(zap.String("handler", "PetHandler")),
	}
}
func (h *PetHandler) MountCreateRoute(r chi.Router) *PetHandler {
	r.Post("/pets", h.Create)
	return h
}
func (h *PetHandler) MountReadRoute(r chi.Router) *PetHandler {
	r.Get("/pets/{id}", h.Read)
	return h
}
func (h *PetHandler) MountUpdateRoute(r chi.Router) *PetHandler {
	r.Patch("/pets/{id}", h.Update)
	return h
}
func (h *PetHandler) MountDeleteRoute(r chi.Router) *PetHandler {
	r.Delete("/pets/{id}", h.Delete)
	return h
}
func (h *PetHandler) MountListRoute(r chi.Router) *PetHandler {
	r.Get("/pets", h.List)
	return h
}
func (h *PetHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r)
}

// PokemonHandler handles http crud operations on ent.Pokemon.
type PokemonHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPokemonHandler(c *ent.Client, l *zap.Logger) *PokemonHandler {
	return &PokemonHandler{
		client: c,
		log:    l.With(zap.String("handler", "PokemonHandler")),
	}
}
func (h *PokemonHandler) MountCreateRoute(r chi.Router) *PokemonHandler {
	r.Post("/pokemons", h.Create)
	return h
}
func (h *PokemonHandler) MountReadRoute(r chi.Router) *PokemonHandler {
	r.Get("/pokemons/{id}", h.Read)
	return h
}
func (h *PokemonHandler) MountUpdateRoute(r chi.Router) *PokemonHandler {
	r.Patch("/pokemons/{id}", h.Update)
	return h
}
func (h *PokemonHandler) MountDeleteRoute(r chi.Router) *PokemonHandler {
	r.Delete("/pokemons/{id}", h.Delete)
	return h
}
func (h *PokemonHandler) MountListRoute(r chi.Router) *PokemonHandler {
	r.Get("/pokemons", h.List)
	return h
}
func (h *PokemonHandler) MountFightsRoute(r chi.Router) *PokemonHandler {
	r.Get("/pokemons/{id}/fights", h.Fights)
	return h
}
func (h *PokemonHandler) MountOpponentsRoute(r chi.Router) *PokemonHandler {
	r.Get("/pokemons/{id}/opponents", h.Opponents)
	return h
}
func (h *PokemonHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountFightsRoute(r).MountOpponentsRoute(r)
}

// UserHandler handles http crud operations on ent.User.
type UserHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewUserHandler(c *ent.Client, l *zap.Logger) *UserHandler {
	return &UserHandler{
		client: c,
		log:    l.With(zap.String("handler", "UserHandler")),
	}
}
func (h *UserHandler) MountCreateRoute(r chi.Router) *UserHandler {
	r.Post("/users", h.Create)
	return h
}
func (h *UserHandler) MountReadRoute(r chi.Router) *UserHandler {
	r.Get("/users/{id}", h.Read)
	return h
}
func (h *UserHandler) MountUpdateRoute(r chi.Router) *UserHandler {
	r.Patch("/users/{id}", h.Update)
	return h
}
func (h *UserHandler) MountDeleteRoute(r chi.Router) *UserHandler {
	r.Delete("/users/{id}", h.Delete)
	return h
}
func (h *UserHandler) MountListRoute(r chi.Router) *UserHandler {
	r.Get("/users", h.List)
	return h
}
func (h *UserHandler) MountCarsRoute(r chi.Router) *UserHandler {
	r.Get("/users/{id}/cars", h.Cars)
	return h
}
func (h *UserHandler) MountGroupsRoute(r chi.Router) *UserHandler {
	r.Get("/users/{id}/groups", h.Groups)
	return h
}
func (h *UserHandler) MountRoutes(r chi.Router) {
	h.MountCreateRoute(r).MountReadRoute(r).MountUpdateRoute(r).MountDeleteRoute(r).MountListRoute(r).MountCarsRoute(r).MountGroupsRoute(r)
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
