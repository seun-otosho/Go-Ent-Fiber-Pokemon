// Code generated by ent, DO NOT EDIT.

package http

import (
	"GoEntFiberPokeman/ent"
	"GoEntFiberPokeman/ent/battle"
	"GoEntFiberPokeman/ent/car"
	"GoEntFiberPokeman/ent/group"
	"GoEntFiberPokeman/ent/pokemon"
	"GoEntFiberPokeman/ent/user"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/mailru/easyjson"
	"go.uber.org/zap"
)

// Contender fetches the ent.contender attached to the ent.Battle
// identified by a given url-parameter from the database and renders it to the client.
func (h BattleHandler) Contender(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Contender"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the contender attached to this battle
	q := h.client.Battle.Query().Where(battle.ID(id)).QueryContender()
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-battle", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("pokemon rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewPokemon2727375384View(e), w)
}

// Oponent fetches the ent.oponent attached to the ent.Battle
// identified by a given url-parameter from the database and renders it to the client.
func (h BattleHandler) Oponent(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Oponent"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the oponent attached to this battle
	q := h.client.Battle.Query().Where(battle.ID(id)).QueryOponent()
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			NotFound(w, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", id))
			BadRequest(w, msg)
		default:
			l.Error("could-not-read-battle", zap.Error(err), zap.Int("id", id))
			InternalServerError(w, nil)
		}
		return
	}
	l.Info("pokemon rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewPokemon2727375384View(e), w)
}

// Cars fetches the ent.cars attached to the ent.Car
// identified by a given url-parameter from the database and renders it to the client.
func (h CarHandler) Cars(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Cars"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the cars attached to this car
	q := h.client.Car.Query().Where(car.ID(id)).QueryCars()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching cars from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("cars rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewCar2526155363Views(es), w)
}

// Users fetches the ent.users attached to the ent.Group
// identified by a given url-parameter from the database and renders it to the client.
func (h GroupHandler) Users(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Users"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the users attached to this group
	q := h.client.Group.Query().Where(group.ID(id)).QueryUsers()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching users from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("users rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewUser2570247333Views(es), w)
}

// Fights fetches the ent.fights attached to the ent.Pokemon
// identified by a given url-parameter from the database and renders it to the client.
func (h PokemonHandler) Fights(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Fights"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the fights attached to this pokemon
	q := h.client.Pokemon.Query().Where(pokemon.ID(id)).QueryFights()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching battles from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("battles rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewBattle2279316362Views(es), w)
}

// Opponents fetches the ent.opponents attached to the ent.Pokemon
// identified by a given url-parameter from the database and renders it to the client.
func (h PokemonHandler) Opponents(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Opponents"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the opponents attached to this pokemon
	q := h.client.Pokemon.Query().Where(pokemon.ID(id)).QueryOpponents()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching battles from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("battles rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewBattle2279316362Views(es), w)
}

// Cars fetches the ent.cars attached to the ent.User
// identified by a given url-parameter from the database and renders it to the client.
func (h UserHandler) Cars(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Cars"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the cars attached to this user
	q := h.client.User.Query().Where(user.ID(id)).QueryCars()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching cars from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("cars rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewCar2526155363Views(es), w)
}

// Groups fetches the ent.groups attached to the ent.User
// identified by a given url-parameter from the database and renders it to the client.
func (h UserHandler) Groups(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Groups"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		BadRequest(w, "id must be an integer")
		return
	}
	// Create the query to fetch the groups attached to this user
	q := h.client.User.Query().Where(user.ID(id)).QueryGroups()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			BadRequest(w, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			BadRequest(w, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching groups from db", zap.Error(err))
		InternalServerError(w, nil)
		return
	}
	l.Info("groups rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewGroup2834184090Views(es), w)
}
